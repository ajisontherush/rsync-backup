#!/bin/bash

usage () {
	echo "usage: $0 [-cvhs] jobfile1 [jobfile2] ..."
	echo ""
	echo "-c | --cron     log to syslog, no output"
	echo "-d | --dry-run  simulation run"
	echo "-v | --debug    verbose logging"
	echo "-h | --help     print usage summary"
	echo ""
}

parse-arguments () {
	JOBFILES=()
	while [[ $# -gt 0 ]]; do
    ARG="$1"
    case "$ARG" in
			-c|--cron) RSYNC_BACKUP_SYSLOG=1 ;;
			-d|--dry-run) RSYNC_BACKUP_DRYRUN=1 ;;
			-v|--debug) RSYNC_BACKUP_DEBUG=1 ;;
			-h|--help) usage ; exit 0 ;;
			*) JOBFILES+=( "$ARG" ) ;;
		esac
	shift
done
}

log () {
	[ -z "$RSYNC_BACKUP_SYSLOG" ] && echo "$@" || logger -t rsync-backup "$@" 
}

log-verbose () {
	[ -z "$RSYNC_BACKUP_DEBUG" ] || log "$@"
}

check-binaries () {
	command -v ssh >/dev/null 2>&1 && log-verbose "INFO: found ssh: $(command -v ssh)" || { log "ERROR: cannot find ssh, exiting" ; exit 1 ; } 
	command -v rsync >/dev/null 2>&1 && log-verbose "INFO: found rsync: $(command -v rsync)" || { log "ERROR: cannot find rsync, exiting" ; exit 1 ; }
}

##### This function checks for battery charge and AC adapter state, and tries to find wakeup events
check-powerstate () {
	if [ -d /sys/class/power_supply/AC ] ; then
		log-verbose "DEBUG: Found AC power supply"
		ACONLINE=$(cat /sys/class/power_supply/AC/online)
		if [ -d /sys/class/power_supply/BAT0 ] ; then
			log-verbose "DEBUG: Battery BAT0 present"
			BATTERYLEVEL=$(cat /sys/class/power_supply/BAT0/capacity)
			log-verbose "DEBUG: BAT0: $BATTERYLEVEL%"
		fi
		if [ -d /sys/class/power_supply/BAT1 ] ; then
			log-verbose "DEBUG: Battery BAT1 present"
			BAT1CAPACITY=$(cat /sys/class/power_supply/BAT0/capacity)
			BAT0FULLENERGY=$(cat /sys/class/power_supply/BAT0/energy_full)
			BAT1FULLENERGY=$(cat /sys/class/power_supply/BAT1/energy_full)
			log-verbose "DEBUG: BAT1: $BAT1CAPACITY%"
			BATTERYLEVEL=$(( $(BAT0FULLENERGY) * $(BATTERYLEVEL) / ($(BAT0FULLENERGY) + $(BAT1FULLENERGY)) + $(BAT1FULLENERGY) * $(BAT1CAPACITY) / ($(BAT0FULLENERGY) + $(BAT1FULLENERGY)) ))
			log-verbose "DEBUG: overall: $BATTERYLEVEL%"
		fi
		[[ ( "$BATTERYLEVEL" -lt "$SAVEBATTERYLEVEL" ) && ( "$ACONLINE" -gt 0 ) ]] && { log "ERROR: battery level is too low" ; exit 1 ; } 
	else
		log "INFO: no power supplies found"
	fi
	
	if journalctl -S "10 minutes ago" | grep "Waking up from system sleep state S3" >/dev/null; then
		WAKEDBYRTC=1
		log-verbose "DEBUG: seems to be waked by RTC, setting var WAKEDBYRTC"
	else
		log-verbose "DEBUG: RTC is not the case of wakeup"
	fi
}

source-jobfile () {
	[ -f $@ ] && . $@ >/dev/null 2>&1 || { log "ERROR: cannot read jobfile: $@" && exit 1; }
	[ -z "$JOBNAME" ] && { log "ERROR: JOBNAME not set, check $@" && exit 1; }
	[ -z "$SERVER" ] && { log "ERROR: SERVER not set, check $@" && exit 1; }
	[ -z "$USER" ] && { log "ERROR: USER not set, check $@" && exit 1; }
	[ -z "$SERVERROOT" ] && { log "ERROR: SERVERROOT not set, check $@" && exit 1; }
	[ -z "$REMOTERSYNCPATH" ] && { log "ERROR: REMOTERSYNCPATH not set, check $@" && exit 1; }
	[ -z "$BACKUPPATH" ] && { log "ERROR: BACKUPPATH not set, check $@" && exit 1; }
	[ -z "$EXCLUDES" ] && { log "ERROR: EXCLUDES not set, check $@" && exit 1; }
}

backup () {
	log "INFO: Starting backup job $JOBNAME"
	systemctl mask suspend.target
	EXCLUDELIST=""
	for EXCLUDEPATH in ${EXCLUDES[*]}; do
		log-verbose "DEBUG: Excluded path: $EXCLUDEPATH"
		EXCLUDELIST="$EXCLUDELIST --exclude $EXCLUDEPATH"
	done
	BDATE=$(date +%Y-%m-%d-%H-%M-%S)
	log-verbose "DEBUG: Backup date is $BDATE"
	log-verbose "DEBUG: Running rsync"
	if rsync -av --delete $EXCLUDELIST --link-dest=../current --rsync-path="$REMOTERSYNCPATH" "$BACKUPPATH" "$USER@$SERVER:$SERVERROOT/$JOBNAME/$BDATE/" ; then
		log-verbose "DEBUG: sshing to renew symlink"
		ssh "$USER@$SERVER" "cd $REMOTESYNCPATH/$JOBNAME; rm current; ln -sf $BDATE current"
	else
		log "ERROR: backup job $JOBNAME: something went wrong with rsync"
	fi
	systemctl unmask suspend.target
}

[ $# -gt 0 ] && parse-arguments $@ || { usage ; exit 1 ; }
check-binaries
check-powerstate

for JOBFILE in ${JOBFILES[*]}; do
	[ -f "$JOBFILE" ] || { log "ERROR: $JOBFILE is not a file"  ; exit 1 ; }
	source-jobfile $JOBFILE
	if ping -c 1 "$SERVER" >/dev/null; then log-verbose "server online"
	if backup; then log "INFO: $BACKUBJOB backup ended without errors"
	else log "there was errors during backup"; fi
	else log-verbose "INFO: server did not respond our ping - assuming offline"; fi
	log-verbose "setting RTC alarm back"
done

if [[ $(date +%_H) -lt 2 ]]; then
	log-verbose "earlier than 4 am - setting on today 2 am"
	rtcwake -t $(date +%s --date="today 2:01") -m no
else
	log-verbose "after  4 am - setting on tomorrow 2 am"
	rtcwake -t $(date +%s --date="tomorrow 2:01") -m no
fi

if cat /proc/acpi/button/lid/LID/state|grep closed > /dev/null; then
	sh -c "sleep 5; systemctl suspend" & 
fi
