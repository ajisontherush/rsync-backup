#!/usr/bin/env bash

usage () {
	echo "usage: $0 [-cdvh] jobfile1 [jobfile2] ..."
	echo ""
	echo "-c | --cron     log to syslog, no output"
	echo "-d | --dry-run  simulation run"
	echo "-v | --debug    verbose logging"
	echo "-h | --help     print usage summary"
	echo ""
}

parse-arguments () {
	JOBFILES=()
	while [[ $# -gt 0 ]]; do
    ARG="$1"
    case "$ARG" in
			-c|--cron)    RSYNC_BACKUP_SYSLOG=1 ;;
			-d|--dry-run) RSYNC_BACKUP_DRYRUN=1 ;;
			-v|--debug)   RSYNC_BACKUP_DEBUG=1 ;;
			-h|--help)    usage ; exit 0 ;;
			*)            JOBFILES+=( "$ARG" ) ;;
		esac
	  shift
  done
}

log () {
	[ -z "$RSYNC_BACKUP_SYSLOG" ] && echo "$@" || logger -t rsync-backup "$@" 
}

log-verbose () {
#	[ -z "$RSYNC_BACKUP_DEBUG" ] || log "$@"
log "$@"
}

check-binaries () {
	command -v logger     >/dev/null 2>&1 && log-verbose "DEBUG: found logger: $(command -v logger)"         || { unset RSYNC_BACKUP_SYSLOG ; log "INFO: cannot find logger, logging to STDOUT" ; } 
	command -v ssh        >/dev/null 2>&1 && log-verbose "DEBUG: found ssh: $(command -v ssh)"               || { log "ERROR: cannot find ssh, exiting"   ; exit 1 ; } 
	command -v rsync      >/dev/null 2>&1 && log-verbose "DEBUG: found rsync: $(command -v rsync)"           || { log "ERROR: cannot find rsync, exiting" ; exit 1 ; }
	command -v systemctl  >/dev/null 2>&1 && log-verbose "DEBUG: found systemctl: $(command -v systemctl)"   || { log-verbose "DEBUG: no systemctl in path" ; NOSYSTEMD=1 ; }
	command -v journalctl >/dev/null 2>&1 && log-verbose "DEBUG: found journalctl: $(command -v journalctl)" || { log-verbose "DEBUG: no journalctl in path" ; NOSYSTEMD=1 ; }
}

##### This function checks for battery charge and AC adapter state, and tries to find wakeup events
check-powerstate () {
	if [ -d /sys/class/power_supply/AC ] ; then
		log-verbose "DEBUG: Found AC power supply"
		ACONLINE=$(cat /sys/class/power_supply/AC/online)
		if [ -d /sys/class/power_supply/BAT0 ] ; then
			log-verbose "DEBUG: Battery BAT0 present"
			BATTERYLEVEL=$(cat /sys/class/power_supply/BAT0/capacity)
			log-verbose "DEBUG: BAT0: $BATTERYLEVEL%"
		fi
		if [ -d /sys/class/power_supply/BAT1 ] ; then
			log-verbose "DEBUG: Battery BAT1 present"
			BAT1CAPACITY=$(cat /sys/class/power_supply/BAT1/capacity)
			BAT0FULLENERGY=$(cat /sys/class/power_supply/BAT1/energy_full)
			BAT1FULLENERGY=$(cat /sys/class/power_supply/BAT1/energy_full)
			log-verbose "DEBUG: BAT1: $BAT1CAPACITY%"
			BATTERYLEVEL=$(( "$BAT0FULLENERGY" * "$BATTERYLEVEL" / ("$BAT0FULLENERGY" + "$BAT1FULLENERGY") + "$BAT1FULLENERGY" * "$BAT1CAPACITY" / ("$BAT0FULLENERGY" + "$BAT1FULLENERGY") ))
			log-verbose "DEBUG: overall: $BATTERYLEVEL%"
		fi
		[[ ( "$BATTERYLEVEL" -lt "$SAVEBATTERYLEVEL" ) && ( "$ACONLINE" -gt 0 ) ]] && { log "ERROR: battery level is too low" ; exit 1 ; } 
	else
		log-verbose "DEBUG: no power supplies found"
	fi
	
}

read-jobfile () {
	[ -f $@ ]                 && . $@ >/dev/null 2>&1 || { log "ERROR: cannot read jobfile: $@" && exit 1; }

	[ -z "$JOBNAME" ]         && { log "ERROR: JOBNAME is not set, check jobfile $@"        && exit 1 ; }
	[ -z "$BACKUPSRC" ]       && { log "ERROR: BACKUPPATH is not set, check jobfile $@"     && exit 1 ; }
	[ -z "$BACKUPDST" ]       && { log "ERROR: BACKUPLOCATION is not set, check jobfile $@" && exit 1 ; }
	RSYNCSTRING=" -avA --link-dest=../current --delete --numeric-ids --fake-super"
	[ -z "$EXCLUDES" ]        || { 
		EXCLUDELIST=""
		for EXCLUDEPATH in ${EXCLUDES[*]} ; do
			log-verbose "DEBUG: Excluded path: $EXCLUDEPATH"
			EXCLUDELIST+=" --exclude $EXCLUDEPATH"
		done
		RSYNCSTRING+="$EXCLUDELIST"
	}
	[ -z "$REMOTERSYNCPATH" ] || RSYNCSTRING+=" --rsync-path=$REMOTERSYNCPATH"
  
  [ -z "$RUSER" ]           && REMOTESTRING="" || REMOTESTRING="$RUSER@"
  [ -z "$SERVER" ]          && REMOTESTRING+="$BACKUPDST/$JOBNAME/" || REMOTESTRING+="$SERVER:$BACKUPDST/$JOBNAME/" 
  RSYNCSTRING+=" $BACKUPSRC $REMOTESTRING"
}

backup () {
	log "INFO: Starting backup job $JOBNAME"
	[ -z "$NOSYSTEMD" ] && systemctl mask suspend.target
	BDATE=$(date +%Y-%m-%d-%H-%M-%S)
	log-verbose "DEBUG: Backup date is $BDATE"
	RSYNCSTRING+="$BDATE"
	log-verbose "DEBUG: Running rsync"
	if rsync $RSYNCSTRING ; then
		[ -z "$SERVER" ] || { log-verbose "DEBUG: sshing to renew symlink" ; ssh "$RUSER@$SERVER" "cd $BACKUPDST/$JOBNAME; rm current; ln -sf $BDATE current" ; }
	else
		log "ERROR: backup job $JOBNAME: something went wrong with rsync"
	fi
	[ -z "$NOSYSTEMD" ] && systemctl unmask suspend.target
}

[ $# -gt 0 ] && parse-arguments $@ || { usage ; exit 1 ; }
check-binaries

for JOBFILE in ${JOBFILES[*]}; do
	[ -f "$JOBFILE" ] || { log "ERROR: $JOBFILE is not a file" ; exit 1 ; }
	read-jobfile "$JOBFILE"
	check-powerstate
	backup
done

if [[ "$USERTC" -eq "1" ]] && [[ $(date +%_H) -lt $(echo $BACKUPTIME | cut -d: -f 1) ]]; then
	log-verbose "DEBUG: setting rtcwake on today $BACKUPTIME minus 3 min"
	rtcwake -t $(date +%s --date="today $BACKUPTIME - 3 min") -m no
else
	log-verbose "DEBUG: setting rtcwake on tomorrow $BACKUPTIME minus 3 min"
	rtcwake -t $(date +%s --date="tomorrow $BACKUPTIME - 3 min") -m no
fi

if [[ "$SUSPEND" -eq "1" ]] && cat /proc/acpi/button/lid/LID/state|grep closed > /dev/null; then
	sh -c "sleep 5; systemctl suspend" & 
fi
